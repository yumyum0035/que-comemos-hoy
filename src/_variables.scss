@import url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css");
//Quicksand (not used atm)
@import url("https://fonts.googleapis.com/css2?family=Quicksand:wght@300;400;600&display=swap");
//Raleway
@import url("https://fonts.googleapis.com/css2?family=Raleway:wght@300&display=swap");

//playfair display
@import url("https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600&display=swap");

//source sans pro
@import url("https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap");

//nunito
@import url("https://fonts.googleapis.com/css2?family=Nunito:wght@300;400&display=swap");

/** colors **/

/* og theme color: */
$orange: #fe9166; //atomic tangerine
$red: #ff5b5c; //orange red crayola
/* uses $white, $black and $gainsboro */

/* palette #1 */
$celadon-green: #49857b;
$cadet-blue: #5aabae;
$isabelline: #f1eee9;
$khaki-web: #d8c3a8;
/* uses $white, $black and $gray */

/* palette based on $yellow-green-crayola #1 */
$queen-pink: #eccbd9ff;
$light-sky-blue: #97d2fbff;
$yellow-green-crayola: #ccf499ff;
$french-sky-blue: #83bcffff;
$red-munsell: #ec0b43ff;

/* palette based on $yellow-green-crayola #2*/
$cadet-grey: #8aa1b1ff;
$rifle-green: #4a5043ff;
$yellow-green-crayola: #ccf499ff;
$melon: #efb0a1ff;
$light-pink: #f4afb4ff;

//palette based on $deep-champagne
$persian-indigo: #340068ff;
$ultra-red: #ff6978ff;
$deep-champagne: #ffd88cff;
$celeste: #b1ede8ff;
$eggplant: #6d435aff;

//random palette
$deep-saffron: #f9a03fff;
$jasmine: #f7d488ff;
$pale-spring-bud: #eaefb1ff;
$nyanza: #e9f7caff;
$silver-pink: #ceb5a7ff;

//colors used:
$black: #000;
$white: #fff;
$gray-x-11: #b9b9b9;
$gainsboro: #ddd;
$silver: #c4c4c4;

$accent-color: $queen-pink;
$side-color: $deep-champagne;
$font-color: $black;
$nav-color: $white; //changes path fill/stroke and font color of nav content
$nav-bg: $black;
$light-orange: rgba($side-color, 0.2);
$light-red: rgba($accent-color, 0.8);

/** font **/
$quicksand: "Quicksand", sans-serif;
$raleway: "Raleway", sans-serif;
$playfair: "Playfair Display", serif;
$source-sans: "Source Sans Pro", sans-serif;
$nunito: "Nunito", sans-serif;
$title-font: $playfair;
$font: $source-sans;

/** utilities **/
$box-shadow: 0px 10px 15px rgba($black, 0.1);
$small-shadow: 0 2px 4px $gainsboro;
$border-radius-big: 30px;
$ingredient-width: 10rem;

/********************* mixins *********************/

// breakpoints (mobile-first)
@mixin breakpoint($point) {
  @if $point == "desktop-xxl" {
    /* XX-Large devices (larger desktops, 1400px and up) */
    @media (min-width: 1400px) {
      @content;
    }
  } @else if $point == "desktop-xl" {
    /* X-Large devices (large desktops, 1200px and up) */
    @media (min-width: 1200px) {
      @content;
    }
  } @else if $point == "desktop" {
    /* Large devices (desktops, 990px and up) */
    @media (min-width: 990px) {
      @content;
    }
  } @else if $point == "tablet" {
    /* Medium devices (tablets, 768px and up) */
    @media (min-width: 768px) {
      @content;
    }
  } @else if $point == "mobile" {
    /* Small devices (landscape phones, 576px and up) */
    @media (min-width: 576px) {
      @content;
    }
  } @else if $point == "mobileonly" {
    /* Small devices (small phones, 320px and up) */
    //seriously who uses a phone smaller than this in 2021
    @media (min-width: 320px) {
      @content;
    }
  }
}

//grid mixin
@mixin grid($gap, $column, $row, $justifyContent, $justifyItems, $alignItems) {
  display: grid;
  grid-template-columns: $column;
  grid-template-rows: $row;
  grid-gap: $gap;
  justify-content: $justifyContent;
  justify-items: $justifyItems;
  align-items: $alignItems;
}

//flex centered
@mixin flex($direction, $wrap, $justifyItems, $justifyContent, $alignItems) {
  display: flex;
  flex-flow: $direction $wrap;
  justify-items: $justifyItems;
  justify-content: $justifyContent;
  align-items: $alignItems;
}

@mixin size($width, $height) {
  width: $width;
  height: $height;
}

@mixin scroll($y, $x) {
  overflow-y: $y;
  overflow-x: $x;
}

//stars dificulty !! it works i do be amazing
@mixin difficulty-stars($dificulty, $color) {
  @if $dificulty == 1 {
    .star1 {
      stroke: $color;
      fill: $color;
    }
    .star2, .star3 {
      stroke: $color;
    }
  } @else if $dificulty == 2 {
    // &::after { content: " ★★☆"; }
    .star1,.star2 {
      stroke: $color;
      fill: $color;
    }
    .star3 {
      stroke: $color;
    }
  } @else if $dificulty == 3 {
    // &::after { content: " ★★★"; }
    .star1, .star2, .star3 {
      stroke: $color;
      fill: $color;
    }
  }
}
